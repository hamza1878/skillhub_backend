# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  firstName: String
  lastName: String
  role: UserRoleType
  picture: ImageFieldOutput
  phone: String
  linkedin: String
  github: String
  technologies: String
  jobTitle: String
  description: String
  email: String
  password: PasswordState
  status: UserStatusType
  createdAt: DateTime
  updatedAt: DateTime
}

enum UserRoleType {
  USER
  COMPANY
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type PasswordState {
  isSet: Boolean!
}

enum UserStatusType {
  active
  inactive
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  role: UserRoleTypeNullableFilter
  phone: StringFilter
  linkedin: StringFilter
  github: StringFilter
  technologies: StringFilter
  jobTitle: StringFilter
  description: StringFilter
  email: StringFilter
  password: PasswordFilter
  status: UserStatusTypeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserStatusTypeNullableFilter {
  equals: UserStatusType
  in: [UserStatusType!]
  notIn: [UserStatusType!]
  not: UserStatusTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  role: OrderDirection
  phone: OrderDirection
  linkedin: OrderDirection
  github: OrderDirection
  technologies: OrderDirection
  jobTitle: OrderDirection
  description: OrderDirection
  email: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  firstName: String
  lastName: String
  role: UserRoleType
  picture: ImageFieldInput
  phone: String
  linkedin: String
  github: String
  technologies: String
  jobTitle: String
  description: String
  email: String
  password: String
  status: UserStatusType
  createdAt: DateTime
  updatedAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  firstName: String
  lastName: String
  role: UserRoleType
  picture: ImageFieldInput
  phone: String
  linkedin: String
  github: String
  technologies: String
  jobTitle: String
  description: String
  email: String
  password: String
  status: UserStatusType
  createdAt: DateTime
  updatedAt: DateTime
}

type Company {
  id: ID!
  user: User
  name: String
  logo: ImageFieldOutput
  IndustryType: String
  type: CompanyTypeType
  jobDomain: String
  registrationNumber: String
  foundingDate: DateTime
  headquarters: String
  legalStatus: String
  capital: Int
  revenue: Int
  industry: String
  businessModel: String
  mission: String
  vision: String
  phone: String
  linkdein: String
  createdAt: DateTime
  updatedAt: DateTime
}

enum CompanyTypeType {
  EURL
  SARL
  SAS
  SASU
}

input CompanyWhereUniqueInput {
  id: ID
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: IDFilter
  user: UserWhereInput
  name: StringFilter
  IndustryType: StringFilter
  type: CompanyTypeTypeNullableFilter
  jobDomain: StringFilter
  registrationNumber: StringFilter
  foundingDate: DateTimeNullableFilter
  headquarters: StringFilter
  legalStatus: StringFilter
  capital: IntNullableFilter
  revenue: IntNullableFilter
  industry: StringFilter
  businessModel: StringFilter
  mission: StringFilter
  vision: StringFilter
  phone: StringFilter
  linkdein: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CompanyTypeTypeNullableFilter {
  equals: CompanyTypeType
  in: [CompanyTypeType!]
  notIn: [CompanyTypeType!]
  not: CompanyTypeTypeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input CompanyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  IndustryType: OrderDirection
  type: OrderDirection
  jobDomain: OrderDirection
  registrationNumber: OrderDirection
  foundingDate: OrderDirection
  headquarters: OrderDirection
  legalStatus: OrderDirection
  capital: OrderDirection
  revenue: OrderDirection
  industry: OrderDirection
  businessModel: OrderDirection
  mission: OrderDirection
  vision: OrderDirection
  phone: OrderDirection
  linkdein: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CompanyUpdateInput {
  user: UserRelateToOneForUpdateInput
  name: String
  logo: ImageFieldInput
  IndustryType: String
  type: CompanyTypeType
  jobDomain: String
  registrationNumber: String
  foundingDate: DateTime
  headquarters: String
  legalStatus: String
  capital: Int
  revenue: Int
  industry: String
  businessModel: String
  mission: String
  vision: String
  phone: String
  linkdein: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CompanyUpdateArgs {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateInput!
}

input CompanyCreateInput {
  user: UserRelateToOneForCreateInput
  name: String
  logo: ImageFieldInput
  IndustryType: String
  type: CompanyTypeType
  jobDomain: String
  registrationNumber: String
  foundingDate: DateTime
  headquarters: String
  legalStatus: String
  capital: Int
  revenue: Int
  industry: String
  businessModel: String
  mission: String
  vision: String
  phone: String
  linkdein: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type JobApplication {
  id: ID!
  user(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  userCount(where: UserWhereInput! = {}): Int
  resume(where: ResumeWhereInput! = {}, orderBy: [ResumeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResumeWhereUniqueInput): [Resume!]
  resumeCount(where: ResumeWhereInput! = {}): Int
  Company(where: CompanyWhereInput! = {}, orderBy: [CompanyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CompanyWhereUniqueInput): [Company!]
  CompanyCount(where: CompanyWhereInput! = {}): Int
  Nom: String
  Poste: String
  Date: DateTime
  Statut: String
  Download: String
  createdAt: DateTime
  updatedAt: DateTime
}

input JobApplicationWhereUniqueInput {
  id: ID
}

input JobApplicationWhereInput {
  AND: [JobApplicationWhereInput!]
  OR: [JobApplicationWhereInput!]
  NOT: [JobApplicationWhereInput!]
  id: IDFilter
  user: UserManyRelationFilter
  resume: ResumeManyRelationFilter
  Company: CompanyManyRelationFilter
  Nom: StringFilter
  Poste: StringFilter
  Date: DateTimeNullableFilter
  Statut: StringFilter
  Download: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input ResumeManyRelationFilter {
  every: ResumeWhereInput
  some: ResumeWhereInput
  none: ResumeWhereInput
}

input CompanyManyRelationFilter {
  every: CompanyWhereInput
  some: CompanyWhereInput
  none: CompanyWhereInput
}

input JobApplicationOrderByInput {
  id: OrderDirection
  Nom: OrderDirection
  Poste: OrderDirection
  Date: OrderDirection
  Statut: OrderDirection
  Download: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input JobApplicationUpdateInput {
  user: UserRelateToManyForUpdateInput
  resume: ResumeRelateToManyForUpdateInput
  Company: CompanyRelateToManyForUpdateInput
  Nom: String
  Poste: String
  Date: DateTime
  Statut: String
  Download: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ResumeRelateToManyForUpdateInput {
  disconnect: [ResumeWhereUniqueInput!]
  set: [ResumeWhereUniqueInput!]
  create: [ResumeCreateInput!]
  connect: [ResumeWhereUniqueInput!]
}

input CompanyRelateToManyForUpdateInput {
  disconnect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  create: [CompanyCreateInput!]
  connect: [CompanyWhereUniqueInput!]
}

input JobApplicationUpdateArgs {
  where: JobApplicationWhereUniqueInput!
  data: JobApplicationUpdateInput!
}

input JobApplicationCreateInput {
  user: UserRelateToManyForCreateInput
  resume: ResumeRelateToManyForCreateInput
  Company: CompanyRelateToManyForCreateInput
  Nom: String
  Poste: String
  Date: DateTime
  Statut: String
  Download: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ResumeRelateToManyForCreateInput {
  create: [ResumeCreateInput!]
  connect: [ResumeWhereUniqueInput!]
}

input CompanyRelateToManyForCreateInput {
  create: [CompanyCreateInput!]
  connect: [CompanyWhereUniqueInput!]
}

type Resume {
  id: ID!
  user(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  userCount(where: UserWhereInput! = {}): Int
  firstName: String
  lastName: String
  email: String
  phone: String
  profilePicture: String
  linkedin: String
  github: String
  professionalSummary: String
  education: JSON
  experiences: JSON
  projects: JSON
  certifications: JSON
  skills: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input ResumeWhereUniqueInput {
  id: ID
}

input ResumeWhereInput {
  AND: [ResumeWhereInput!]
  OR: [ResumeWhereInput!]
  NOT: [ResumeWhereInput!]
  id: IDFilter
  user: UserManyRelationFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  phone: StringFilter
  profilePicture: StringFilter
  linkedin: StringFilter
  github: StringFilter
  professionalSummary: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ResumeOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  profilePicture: OrderDirection
  linkedin: OrderDirection
  github: OrderDirection
  professionalSummary: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ResumeUpdateInput {
  user: UserRelateToManyForUpdateInput
  firstName: String
  lastName: String
  email: String
  phone: String
  profilePicture: String
  linkedin: String
  github: String
  professionalSummary: String
  education: JSON
  experiences: JSON
  projects: JSON
  certifications: JSON
  skills: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input ResumeUpdateArgs {
  where: ResumeWhereUniqueInput!
  data: ResumeUpdateInput!
}

input ResumeCreateInput {
  user: UserRelateToManyForCreateInput
  firstName: String
  lastName: String
  email: String
  phone: String
  profilePicture: String
  linkedin: String
  github: String
  professionalSummary: String
  education: JSON
  experiences: JSON
  projects: JSON
  certifications: JSON
  skills: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCompany(data: CompanyCreateInput!): Company
  createCompanies(data: [CompanyCreateInput!]!): [Company]
  updateCompany(where: CompanyWhereUniqueInput!, data: CompanyUpdateInput!): Company
  updateCompanies(data: [CompanyUpdateArgs!]!): [Company]
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteCompanies(where: [CompanyWhereUniqueInput!]!): [Company]
  createJobApplication(data: JobApplicationCreateInput!): JobApplication
  createJobApplications(data: [JobApplicationCreateInput!]!): [JobApplication]
  updateJobApplication(where: JobApplicationWhereUniqueInput!, data: JobApplicationUpdateInput!): JobApplication
  updateJobApplications(data: [JobApplicationUpdateArgs!]!): [JobApplication]
  deleteJobApplication(where: JobApplicationWhereUniqueInput!): JobApplication
  deleteJobApplications(where: [JobApplicationWhereUniqueInput!]!): [JobApplication]
  createResume(data: ResumeCreateInput!): Resume
  createResumes(data: [ResumeCreateInput!]!): [Resume]
  updateResume(where: ResumeWhereUniqueInput!, data: ResumeUpdateInput!): Resume
  updateResumes(data: [ResumeUpdateArgs!]!): [Resume]
  deleteResume(where: ResumeWhereUniqueInput!): Resume
  deleteResumes(where: [ResumeWhereUniqueInput!]!): [Resume]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput! = {}, orderBy: [CompanyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CompanyWhereUniqueInput): [Company!]
  companiesCount(where: CompanyWhereInput! = {}): Int
  jobApplication(where: JobApplicationWhereUniqueInput!): JobApplication
  jobApplications(where: JobApplicationWhereInput! = {}, orderBy: [JobApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobApplicationWhereUniqueInput): [JobApplication!]
  jobApplicationsCount(where: JobApplicationWhereInput! = {}): Int
  resume(where: ResumeWhereUniqueInput!): Resume
  resumes(where: ResumeWhereInput! = {}, orderBy: [ResumeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResumeWhereUniqueInput): [Resume!]
  resumesCount(where: ResumeWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
